# Generated by Django 4.0.4 on 2022-06-30 17:28

import core.models.fonts
import core.utils
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_currentuser.db.models.fields
import django_currentuser.middleware
import functools
import modelcluster.fields
import uuid
import wagtail.fields
import wagtail.search.index
import wagtail_color_panel.fields


class Migration(migrations.Migration):

    replaces = [('core', '0001_initial'), ('core', '0002_initial'), ('core', '0003_brandsettings_show_footer_waves'), ('core', '0004_alter_brandsettings_show_footer_waves'), ('core', '0005_alter_contactsettings_email_and_more'), ('core', '0006_googlefontsubset_googlefontvariant_googlefont'), ('core', '0007_brandsettings_google_font_alter_googlefont_version'), ('core', '0008_alter_brandsettings_google_font'), ('core', '0009_alter_brandsettings_google_font'), ('core', '0010_sociallink_alter_googlefont_options_and_more'), ('core', '0011_simplepage_og_image'), ('core', '0012_homepage_og_image'), ('core', '0013_simplepage_seo_keywords'), ('core', '0014_homepage_seo_keywords'), ('core', '0015_alter_homepage_seo_keywords'), ('core', '0016_alter_simplepage_seo_keywords'), ('core', '0017_alter_homepage_seo_keywords_and_more'), ('core', '0018_alter_sociallink_options_sociallink_settings_and_more'), ('core', '0019_sociallink_is_active'), ('core', '0020_herosection_enable_particles_and_more'), ('core', '0021_brandsettings_footer_image'), ('core', '0022_brandsettings_error_color'), ('core', '0023_brandsettings_cart_color_and_more'), ('core', '0024_alter_brandsettings_accent_color_and_more'), ('core', '0025_shopsettings'), ('core', '0026_alter_shopsettings_options'), ('core', '0027_delete_shopsettings'), ('core', '0028_button_text_color_alter_button_color'), ('core', '0029_producttypeplacement'), ('core', '0030_alter_testimonial_options_and_more'), ('core', '0031_delete_ebook'), ('core', '0032_alter_counter_unique_together_counter_section_and_more'), ('core', '0033_alter_frequentlyaskedquestion_unique_together_and_more'), ('core', '0034_alter_contactsettings_full_name'), ('core', '0035_contactsettings_business_title'), ('core', '0036_remove_siteconfiguration_footer_image_and_more'), ('core', '0037_alter_brandsettings_logo_controlcenter'), ('core', '0038_brandsettings_notification_bar_color_and_more'), ('core', '0039_pagesection_page'), ('core', '0040_alter_pagesection_page'), ('core', '0041_remove_pagesection_page')]

    initial = True

    dependencies = [
        ('shop', '0009_shopsettings'),
        ('wagtailimages', '0024_index_image_file_hash'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0069_log_entry_jsonfield'),
        ('shop', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Button',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, default='', help_text='This name shows up in admin only.', max_length=64)),
                ('text', models.CharField(blank=True, default='', max_length=64)),
                ('link', models.CharField(blank=True, default='', max_length=512)),
                ('custom_html', models.TextField(blank=True, default='', help_text='This option overwrites the link setting.')),
                ('open_in_new_tab', models.BooleanField(default=True)),
                ('color', wagtail_color_panel.fields.ColorField(blank=True, max_length=7, null=True, verbose_name='Color')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
                ('text_color', wagtail_color_panel.fields.ColorField(blank=True, max_length=7, null=True, verbose_name='Text Color')),
            ],
            options={
                'verbose_name': 'Button',
                'verbose_name_plural': 'Buttons',
                'unique_together': {('translation_key', 'locale')},
            },
        ),
        migrations.CreateModel(
            name='HeroSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.TextField(max_length=128, verbose_name='Name')),
                ('title', models.CharField(blank=True, default='Store Engine', help_text='This is the big title that shows up in the hero section.', max_length=64, verbose_name='Hero Title')),
                ('subheading', models.CharField(blank=True, default='', help_text='This is the text that shows up under the title in the hero section.', max_length=128, verbose_name='Hero Subheading')),
                ('video', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_videos'}), validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='Hero Video')),
                ('created_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('image', models.ForeignKey(blank=True, help_text='This image shows up in the hero section.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Hero Image')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
                ('enable_particles', models.BooleanField(default=False, verbose_name='Enable Particles')),
            ],
            options={
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='PageSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('section_type', models.CharField(choices=[('default_section', 'Default Section'), ('faq_section', 'FAQ Section'), ('contact_section', 'Contact Section'), ('counters_section', 'Counters Section'), ('testimonials_section', 'Testimonials Section'), ('product_carousel_section', 'Product Carousel Section'), ('product_list_square', 'Product List (Square Cards)'), ('product_list_tall', 'Product List (Tall Cards)'), ('checkout_section', 'Checkout Section')], default='default_section', max_length=125, verbose_name='Type')),
                ('name', models.TextField(max_length=128, verbose_name='Name')),
                ('text_color', wagtail_color_panel.fields.ColorField(blank=True, max_length=7, null=True, verbose_name='Text Color')),
                ('background_color', wagtail_color_panel.fields.ColorField(blank=True, max_length=7, null=True, verbose_name='Background Color')),
                ('text', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Text')),
                ('iframe', models.TextField(blank=True, help_text="If you need to embed any content in this section, you can paste the <iframe> code here. Tip: Content size not right? Look for width='XXX' and height='XXX' in the pasted code and change it! For example, you can use width='100%'.", null=True, verbose_name='Iframe')),
                ('button', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.button', verbose_name='Button')),
                ('created_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('image', models.ForeignKey(blank=True, help_text='This image will show up on the right side of the section.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Image')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
            ],
            options={
                'unique_together': {('translation_key', 'locale')},
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='QuizRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', "Other / Don't wish to respond")], max_length=32, verbose_name='Gender')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('goal', models.CharField(choices=[('reduce', 'Reduce'), ('gain', 'Gain'), ('sustain', 'Sustain')], max_length=32, verbose_name='Goal')),
                ('first_name', models.CharField(max_length=64, verbose_name='First Name')),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Quiz Record',
                'verbose_name_plural': 'Quiz Records',
            },
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gdpr_file', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='GDPR Document')),
                ('terms_and_conditions_file', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='Terms And Conditions Document')),
                ('created_by', django_currentuser.db.models.fields.CurrentUserField(default=django_currentuser.middleware.get_current_authenticated_user, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Site Configuration',
            },
        ),
        migrations.CreateModel(
            name='ProductPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='shop.product')),
                ('section', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='core.pagesection')),
            ],
            options={
                'verbose_name': 'Products',
                'verbose_name_plural': 'Products',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageSectionPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='page_sections', to='wagtailcore.page')),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='core.pagesection')),
            ],
            options={
                'verbose_name': 'Page Sections',
                'verbose_name_plural': 'Page Sections',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('author', models.CharField(max_length=64, verbose_name='Author')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
                ('section', modelcluster.fields.ParentalKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='testimonials', to='core.pagesection')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ['sort_order'],
            },
        ),
        migrations.CreateModel(
            name='FrequentlyAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', wagtail.fields.RichTextField(verbose_name='Question')),
                ('answer', wagtail.fields.RichTextField(verbose_name='Answer')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('section', modelcluster.fields.ParentalKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='faqs', to='core.pagesection')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Frequently Asked Question',
                'verbose_name_plural': 'Frequently Asked Questions',
            },
        ),
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='E.g. 420 or 69+', max_length=8, verbose_name='Number')),
                ('text', models.CharField(help_text='E.g. Clients or Lectures', max_length=32, verbose_name='Text')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
                ('section', modelcluster.fields.ParentalKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='counters', to='core.pagesection')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Counter',
                'verbose_name_plural': 'Counters',
            },
        ),
        migrations.CreateModel(
            name='GoogleFontSubset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=125, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='GoogleFontVariant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveIntegerField(verbose_name='Font Weight')),
                ('style', models.CharField(max_length=125, verbose_name='Font Style')),
                ('variant_id', models.CharField(max_length=125, unique=True, verbose_name='Variant ID')),
            ],
        ),
        migrations.CreateModel(
            name='GoogleFont',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('family', models.CharField(max_length=125, verbose_name='Font Family')),
                ('version', models.CharField(default='v1', max_length=16, verbose_name='Font Version')),
                ('category', models.CharField(max_length=125, verbose_name='Font Category')),
                ('subsets', models.ManyToManyField(to='core.googlefontsubset', verbose_name='Font Subsets')),
                ('variants', models.ManyToManyField(to='core.googlefontvariant', verbose_name='Font Variants')),
            ],
            options={
                'ordering': ('family',),
            },
        ),
        migrations.CreateModel(
            name='BrandSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Logo')),
                ('primary_color', wagtail_color_panel.fields.ColorField(default='#1D2228', max_length=7, verbose_name='Primary Color')),
                ('accent_color', wagtail_color_panel.fields.ColorField(default='#FB8122', max_length=7, verbose_name='Accent Color')),
                ('text_color', wagtail_color_panel.fields.ColorField(default='#FFFFFF', max_length=7, verbose_name='Text Color')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
                ('show_footer_waves', models.BooleanField(default=False, verbose_name='Show Footer Waves')),
                ('google_font', models.ForeignKey(default=core.models.fonts.get_default_font_id, on_delete=models.SET(core.models.fonts.get_default_font), to='core.googlefont')),
                ('footer_image', models.ForeignKey(blank=True, help_text='This image shows up in the footer section.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Footer Image')),
                ('error_color', wagtail_color_panel.fields.ColorField(default='#FF7B76', help_text='The color of error messages in forms.', max_length=7, verbose_name='Error Color')),
                ('cart_color', wagtail_color_panel.fields.ColorField(default='#1D2938', max_length=7, verbose_name='Cart Color')),
                ('cart_text_color', wagtail_color_panel.fields.ColorField(default='#FFFFFF', max_length=7, verbose_name='Cart Text Color')),
                ('notification_bar_color', wagtail_color_panel.fields.ColorField(default='#C26F5E', max_length=7, verbose_name='Notification Bar Color')),
                ('notification_bar_text_color', wagtail_color_panel.fields.ColorField(default='#FFFFFF', max_length=7, verbose_name='Notification Bar Text Color')),
            ],
            options={
                'verbose_name': 'Branding',
            },
        ),
        migrations.CreateModel(
            name='ContactSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, default='Store Engine', max_length=128, verbose_name='Full Name')),
                ('vat_id', models.CharField(blank=True, default='', max_length=10, verbose_name='VAT ID')),
                ('phone_number', models.CharField(blank=True, max_length=16, null=True, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('billing_address', models.CharField(blank=True, max_length=128, null=True, verbose_name='Billing Address')),
                ('billing_address_zip', models.CharField(blank=True, max_length=16, null=True, verbose_name='ZIP')),
                ('billing_address_city', models.CharField(blank=True, max_length=64, null=True, verbose_name='City')),
                ('invoices_due_in_days', models.PositiveIntegerField(default=14, verbose_name='Default Number of Days until Invoice is Due')),
                ('bank_account', models.CharField(blank=True, max_length=64, null=True, verbose_name='Bank Account')),
                ('vat_payer', models.BooleanField(default=False, verbose_name='VAT Payer')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
                ('business_title', models.CharField(blank=True, default='Eshop Platform', help_text='E.g. "Personal Coach"', max_length=64, null=True, verbose_name='Business Title')),
            ],
            options={
                'verbose_name': 'Contact',
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('hero_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.herosection', verbose_name='Hero Section')),
                ('og_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='SEO image')),
                ('seo_keywords', models.CharField(blank=True, help_text='Comma-separated keywords for search engines. For Example: food, friends, travelling', max_length=512, null=True, verbose_name='Keywords')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SimplePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('og_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='SEO image')),
                ('seo_keywords', models.CharField(blank=True, help_text='Comma-separated keywords for search engines. For Example: food, friends, travelling', max_length=512, null=True, verbose_name='Keywords')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SocialLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='E.g. Twitter', max_length=64, verbose_name='Name')),
                ('url', models.URLField(help_text='E.g. https://twitter.com/home/', max_length=512, verbose_name='URL')),
                ('icon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image', verbose_name='Icon')),
                ('settings', modelcluster.fields.ParentalKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='social_links', to='core.contactsettings')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
            ],
            options={
                'ordering': ['sort_order'],
                'verbose_name': 'Social Links',
                'verbose_name_plural': 'Social Links',
            },
        ),
        migrations.CreateModel(
            name='ProductTypePlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('split_into_categories', models.BooleanField(default=True, help_text='Split the displayed products into categories.', verbose_name='Split Into Categories')),
                ('product_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='shop.producttype')),
                ('section', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_types', to='core.pagesection')),
            ],
            options={
                'verbose_name': 'Product Types',
                'verbose_name_plural': 'Product Types',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ControlCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shop_enabled', models.BooleanField(default=False, help_text='Enable or disable shop features, like checkout or cart.', verbose_name='Shop Enabled')),
                ('notification_bar_show', models.BooleanField(default=False, verbose_name='Show Notification Bar')),
                ('notification_bar_text', models.CharField(blank=True, max_length=512, null=True, verbose_name='Notification Text')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.site')),
            ],
            options={
                'verbose_name': 'Control Center',
            },
        ),
    ]
