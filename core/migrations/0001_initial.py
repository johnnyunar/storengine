# Generated by Django 4.0.4 on 2022-06-22 15:40

import core.utils
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import functools
import uuid
import wagtail.fields
import wagtail.search.index
import wagtail_color_panel.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0069_log_entry_jsonfield'),
    ]

    operations = [
        migrations.CreateModel(
            name='BrandSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Logo')),
                ('primary_color', wagtail_color_panel.fields.ColorField(default='#4E8397', max_length=7, verbose_name='Primary Color')),
                ('accent_color', wagtail_color_panel.fields.ColorField(default='#4E8397', max_length=7, verbose_name='Accent Color')),
                ('text_color', wagtail_color_panel.fields.ColorField(default='#FFFFFF', max_length=7, verbose_name='Text Color')),
            ],
            options={
                'verbose_name': 'Branding',
            },
        ),
        migrations.CreateModel(
            name='Button',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.CharField(blank=True, default='', help_text='This name shows up in admin only.', max_length=64)),
                ('text', models.CharField(blank=True, default='', max_length=64)),
                ('link', models.CharField(blank=True, default='', max_length=512)),
                ('custom_html', models.TextField(blank=True, default='', help_text='This option overwrites the link setting.')),
                ('open_in_new_tab', models.BooleanField(default=True)),
                ('color', wagtail_color_panel.fields.ColorField(default='#0e0e0e', max_length=7)),
            ],
            options={
                'verbose_name': 'Button',
                'verbose_name_plural': 'Buttons',
            },
        ),
        migrations.CreateModel(
            name='ContactSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(blank=True, default='Snap Shop', max_length=64, verbose_name='Full Name')),
                ('vat_id', models.CharField(blank=True, default='', max_length=10, verbose_name='VAT ID')),
                ('phone_number', models.CharField(blank=True, default='', max_length=16, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='Email')),
                ('facebook', models.URLField(help_text='Your Facebook page URL')),
                ('instagram', models.URLField(help_text='Your Instagram Profile URL')),
                ('linkedin', models.URLField(help_text='Your LinkedIn Profile URL')),
                ('trip_advisor', models.URLField(help_text='Your Trip Advisor page URL')),
                ('youtube', models.URLField(help_text='Your YouTube channel or user account URL')),
                ('tiktok', models.URLField(help_text='Your TikTok account URL')),
                ('billing_address', models.CharField(blank=True, max_length=128, null=True, verbose_name='Billing Address')),
                ('billing_address_zip', models.CharField(blank=True, max_length=16, null=True, verbose_name='ZIP')),
                ('billing_address_city', models.CharField(blank=True, max_length=64, null=True, verbose_name='City')),
                ('invoices_due_in_days', models.PositiveIntegerField(default=14, verbose_name='Default Number of Days until Invoice is Due')),
                ('bank_account', models.CharField(blank=True, max_length=64, null=True, verbose_name='Bank Account')),
                ('vat_payer', models.BooleanField(default=False, verbose_name='VAT Payer')),
            ],
            options={
                'verbose_name': 'Contact',
            },
        ),
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('number', models.CharField(help_text='E.g. 420 or 69+', max_length=8, verbose_name='Number')),
                ('text', models.CharField(help_text='E.g. Clients or Lectures', max_length=32, verbose_name='Text')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
            ],
            options={
                'verbose_name': 'Counter',
                'verbose_name_plural': 'Counters',
            },
        ),
        migrations.CreateModel(
            name='Ebook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=256, verbose_name='Title')),
                ('author', models.CharField(default='Snap Shop', max_length=64, verbose_name='Author')),
                ('file', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'ebook_files'}), verbose_name='File')),
                ('plan_type', models.CharField(blank=True, choices=[('reduce', 'Reduce'), ('gain', 'Gain'), ('sustain', 'Sustain')], max_length=64, null=True, unique=True, verbose_name='Plan Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Added At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Ebook',
                'verbose_name_plural': 'Ebooks',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='FrequentlyAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('question', wagtail.fields.RichTextField(verbose_name='Question')),
                ('answer', wagtail.fields.RichTextField(verbose_name='Answer')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Frequently Asked Question',
                'verbose_name_plural': 'Frequently Asked Questions',
            },
        ),
        migrations.CreateModel(
            name='HeroSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('name', models.TextField(max_length=128, verbose_name='Name')),
                ('title', models.CharField(blank=True, default='Store Engine', help_text='This is the big title that shows up in the hero section.', max_length=64, verbose_name='Hero Title')),
                ('subheading', models.CharField(blank=True, default='', help_text='This is the text that shows up under the title in the hero section.', max_length=128, verbose_name='Hero Subheading')),
                ('video', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_videos'}), validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='Hero Video')),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='PageSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('section_type', models.CharField(choices=[('default_section', 'Default Section'), ('faq_section', 'FAQ Section'), ('contact_section', 'Contact Section'), ('counters_section', 'Counters Section'), ('testimonials_section', 'Testimonials Section'), ('product_carousel_section', 'Product Carousel Section'), ('product_list_square', 'Product List (Square Cards)'), ('product_list_tall', 'Product List (Tall Cards)')], default='default_section', max_length=125, verbose_name='Type')),
                ('name', models.TextField(max_length=128, verbose_name='Name')),
                ('text_color', wagtail_color_panel.fields.ColorField(blank=True, max_length=7, null=True, verbose_name='Text Color')),
                ('background_color', wagtail_color_panel.fields.ColorField(blank=True, max_length=7, null=True, verbose_name='Background Color')),
                ('text', wagtail.fields.RichTextField(blank=True, null=True, verbose_name='Text')),
                ('iframe', models.TextField(blank=True, help_text="If you need to embed any content in this section, you can paste the <iframe> code here. Tip: Content size not right? Look for width='XXX' and height='XXX' in the pasted code and change it! For example, you can use width='100%'.", null=True, verbose_name='Iframe')),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='PageSectionPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Page Sections',
                'verbose_name_plural': 'Page Sections',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Products',
                'verbose_name_plural': 'Products',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='QuizRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', "Other / Don't wish to respond")], max_length=32, verbose_name='Gender')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('goal', models.CharField(choices=[('reduce', 'Reduce'), ('gain', 'Gain'), ('sustain', 'Sustain')], max_length=32, verbose_name='Goal')),
                ('first_name', models.CharField(max_length=64, verbose_name='First Name')),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Quiz Record',
                'verbose_name_plural': 'Quiz Records',
            },
        ),
        migrations.CreateModel(
            name='SimplePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_bar_show', models.BooleanField(blank=True, default=0, verbose_name='Show notification bar')),
                ('notification_bar_text', models.CharField(blank=True, default='', max_length=512, verbose_name='Notification text')),
                ('hero_video', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_videos'}), validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='Hero Video')),
                ('gdpr_file', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='GDPR Document')),
                ('terms_and_conditions_file', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='Terms And Conditions Document')),
            ],
            options={
                'verbose_name': 'Site Configuration',
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('translation_key', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('text', models.TextField()),
                ('author', models.CharField(max_length=64, verbose_name='Autor')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
                ('locale', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailcore.locale')),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
            },
        ),
    ]
