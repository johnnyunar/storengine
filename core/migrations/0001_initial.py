# Generated by Django 4.0.4 on 2022-06-03 20:39

import core.utils
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djrichtextfield.models
import functools
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0069_log_entry_jsonfield'),
    ]

    operations = [
        migrations.CreateModel(
            name='Button',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='This name shows up in admin only.', max_length=64)),
                ('text', models.CharField(blank=True, default='', max_length=64)),
                ('text_cs', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('text_en', models.CharField(blank=True, default='', max_length=64, null=True)),
                ('link', models.CharField(blank=True, default='', max_length=512)),
                ('link_cs', models.CharField(blank=True, default='', max_length=512, null=True)),
                ('link_en', models.CharField(blank=True, default='', max_length=512, null=True)),
                ('custom_html', models.TextField(blank=True, default='', help_text='This option overwrites the link setting.')),
                ('custom_html_cs', models.TextField(blank=True, default='', help_text='This option overwrites the link setting.', null=True)),
                ('custom_html_en', models.TextField(blank=True, default='', help_text='This option overwrites the link setting.', null=True)),
                ('open_in_new_tab', models.BooleanField(default=True)),
                ('color', models.CharField(blank=True, default='#0e0e0e', max_length=18, null=True)),
            ],
            options={
                'verbose_name': 'Button',
                'verbose_name_plural': 'Buttons',
            },
        ),
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='E.g. 420 or 69+', max_length=8, verbose_name='Number')),
                ('text', models.CharField(help_text='E.g. Clients or Lectures', max_length=32, verbose_name='Text')),
                ('text_cs', models.CharField(help_text='E.g. Clients or Lectures', max_length=32, null=True, verbose_name='Text')),
                ('text_en', models.CharField(help_text='E.g. Clients or Lectures', max_length=32, null=True, verbose_name='Text')),
                ('ordering', models.PositiveIntegerField(default=0, verbose_name='Ordering')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
            ],
            options={
                'verbose_name': 'Counter',
                'verbose_name_plural': 'Counters',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='Ebook',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256, verbose_name='Title')),
                ('author', models.CharField(default='Snap Shop', max_length=64, verbose_name='Author')),
                ('image', models.ImageField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'ebook_images'}), verbose_name='Image')),
                ('file', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'ebook_files'}), verbose_name='File')),
                ('plan_type', models.CharField(blank=True, choices=[('reduce', 'Reduce'), ('gain', 'Gain'), ('sustain', 'Sustain')], max_length=64, null=True, unique=True, verbose_name='Plan Type')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Added At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Ebook',
                'verbose_name_plural': 'Ebooks',
                'ordering': ('created_at',),
            },
        ),
        migrations.CreateModel(
            name='FrequentlyAskedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', djrichtextfield.models.RichTextField(verbose_name='Question')),
                ('question_cs', djrichtextfield.models.RichTextField(null=True, verbose_name='Question')),
                ('question_en', djrichtextfield.models.RichTextField(null=True, verbose_name='Question')),
                ('answer', djrichtextfield.models.RichTextField(verbose_name='Answer')),
                ('answer_cs', djrichtextfield.models.RichTextField(null=True, verbose_name='Answer')),
                ('answer_en', djrichtextfield.models.RichTextField(null=True, verbose_name='Answer')),
                ('ordering', models.PositiveIntegerField(default=0, verbose_name='Ordering')),
                ('is_active', models.BooleanField(default=True, verbose_name='Available')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Frequently Asked Question',
                'verbose_name_plural': 'Frequently Asked Questions',
                'ordering': ('ordering',),
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('hero_title', models.CharField(blank=True, default='SNAPSHOP', help_text='This is the big title that shows up in the hero section.', max_length=64, verbose_name='Hero Title')),
                ('hero_image', models.ImageField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_images'}), verbose_name='Hero Section Image')),
                ('hero_video', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_videos'}), validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='Hero Video')),
                ('subheading_text', models.CharField(blank=True, default='', help_text='This is the text that shows up under the title in the hero section.', max_length=128, verbose_name='Hero Subheading')),
                ('quiz_heading', models.TextField(blank=True, null=True, verbose_name='Quiz Heading')),
                ('quiz_subheading', models.TextField(blank=True, null=True, verbose_name='Quiz Subheading')),
                ('about_me_text', wagtail.fields.RichTextField(blank=True, default='')),
                ('about_me_image', models.ImageField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'about_me_images'}), verbose_name='About Me Section Image')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HomePageSectionPlacement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
            ],
            options={
                'verbose_name': 'section placement',
                'verbose_name_plural': 'section placements',
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PageSection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', wagtail.fields.RichTextField(verbose_name='Text')),
            ],
        ),
        migrations.CreateModel(
            name='QuizRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', "Other / Don't wish to respond")], max_length=32, verbose_name='Gender')),
                ('age', models.IntegerField(verbose_name='Age')),
                ('goal', models.CharField(choices=[('reduce', 'Reduce'), ('gain', 'Gain'), ('sustain', 'Sustain')], max_length=32, verbose_name='Goal')),
                ('first_name', models.CharField(max_length=64, verbose_name='First Name')),
                ('email', models.EmailField(max_length=254)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Quiz Record',
                'verbose_name_plural': 'Quiz Records',
            },
        ),
        migrations.CreateModel(
            name='SiteConfiguration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_bar_show', models.BooleanField(blank=True, default=0, verbose_name='Show notification bar')),
                ('notification_bar_text', models.CharField(blank=True, default='', max_length=512, verbose_name='Notification text')),
                ('notification_bar_text_cs', models.CharField(blank=True, default='', max_length=512, null=True, verbose_name='Notification text')),
                ('notification_bar_text_en', models.CharField(blank=True, default='', max_length=512, null=True, verbose_name='Notification text')),
                ('hero_title', models.CharField(blank=True, default='SNAPSHOP', help_text='This is the big title that shows up in the hero section.', max_length=64, verbose_name='Hero Title')),
                ('hero_video', models.FileField(blank=True, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_videos'}), validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['MOV', 'avi', 'mp4', 'webm', 'mkv'])], verbose_name='Hero Video')),
                ('subheading_text', models.CharField(blank=True, default='', help_text='This is the text that shows up under the title in the hero section.', max_length=128, verbose_name='Hero Subheading')),
                ('subheading_text_cs', models.CharField(blank=True, default='', help_text='This is the text that shows up under the title in the hero section.', max_length=128, null=True, verbose_name='Hero Subheading')),
                ('subheading_text_en', models.CharField(blank=True, default='', help_text='This is the text that shows up under the title in the hero section.', max_length=128, null=True, verbose_name='Hero Subheading')),
                ('quiz_heading', models.TextField(blank=True, null=True, verbose_name='Quiz Heading')),
                ('quiz_heading_cs', models.TextField(blank=True, null=True, verbose_name='Quiz Heading')),
                ('quiz_heading_en', models.TextField(blank=True, null=True, verbose_name='Quiz Heading')),
                ('quiz_subheading', models.TextField(blank=True, null=True, verbose_name='Quiz Subheading')),
                ('quiz_subheading_cs', models.TextField(blank=True, null=True, verbose_name='Quiz Subheading')),
                ('quiz_subheading_en', models.TextField(blank=True, null=True, verbose_name='Quiz Subheading')),
                ('about_me_text', djrichtextfield.models.RichTextField(blank=True, default='')),
                ('about_me_text_cs', djrichtextfield.models.RichTextField(blank=True, default='', null=True)),
                ('about_me_text_en', djrichtextfield.models.RichTextField(blank=True, default='', null=True)),
                ('about_me_image', models.ImageField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'about_me_images'}), verbose_name='About Me Section Image')),
                ('second_section_text', djrichtextfield.models.RichTextField(blank=True, default='')),
                ('second_section_text_cs', djrichtextfield.models.RichTextField(blank=True, default='', null=True)),
                ('second_section_text_en', djrichtextfield.models.RichTextField(blank=True, default='', null=True)),
                ('hero_image', models.ImageField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'hero_images'}), verbose_name='Hero Section Image')),
                ('ebook_text', djrichtextfield.models.RichTextField(blank=True, default='', verbose_name='Ebook Text')),
                ('ebook_text_cs', djrichtextfield.models.RichTextField(blank=True, default='', null=True, verbose_name='Ebook Text')),
                ('ebook_text_en', djrichtextfield.models.RichTextField(blank=True, default='', null=True, verbose_name='Ebook Text')),
                ('footer_image', models.ImageField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'footer_images'}), verbose_name='Footer Section Image')),
                ('full_name', models.CharField(blank=True, default='Snap Shop', max_length=64, verbose_name='Full Name')),
                ('vat_id', models.CharField(blank=True, default='', max_length=10, verbose_name='VAT ID')),
                ('phone_number', models.CharField(blank=True, default='', max_length=16, verbose_name='Phone Number')),
                ('email', models.EmailField(blank=True, default='', max_length=254, verbose_name='Email')),
                ('instagram_link', models.URLField(blank=True, default='', max_length=512)),
                ('facebook_link', models.URLField(blank=True, default='', max_length=512)),
                ('linkedin_link', models.URLField(blank=True, default='', max_length=512)),
                ('gdpr_text', djrichtextfield.models.RichTextField(blank=True, default='', verbose_name='GDPR Text')),
                ('gdpr_text_cs', djrichtextfield.models.RichTextField(blank=True, default='', null=True, verbose_name='GDPR Text')),
                ('gdpr_text_en', djrichtextfield.models.RichTextField(blank=True, default='', null=True, verbose_name='GDPR Text')),
                ('terms_and_conditions_text', djrichtextfield.models.RichTextField(blank=True, default='', verbose_name='Terms And Conditions Text')),
                ('terms_and_conditions_text_cs', djrichtextfield.models.RichTextField(blank=True, default='', null=True, verbose_name='Terms And Conditions Text')),
                ('terms_and_conditions_text_en', djrichtextfield.models.RichTextField(blank=True, default='', null=True, verbose_name='Terms And Conditions Text')),
                ('gdpr_file', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='GDPR Document')),
                ('gdpr_file_cs', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='GDPR Document')),
                ('gdpr_file_en', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='GDPR Document')),
                ('terms_and_conditions_file', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='Terms And Conditions Document')),
                ('terms_and_conditions_file_cs', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='Terms And Conditions Document')),
                ('terms_and_conditions_file_en', models.FileField(blank=True, max_length=300, null=True, upload_to=functools.partial(core.utils.user_directory_path, *(), **{'subdir': 'legal_documents'}), verbose_name='Terms And Conditions Document')),
                ('billing_address', models.CharField(blank=True, max_length=128, null=True, verbose_name='Billing Address')),
                ('billing_address_zip', models.CharField(blank=True, max_length=16, null=True, verbose_name='ZIP')),
                ('billing_address_city', models.CharField(blank=True, max_length=64, null=True, verbose_name='City')),
                ('invoices_due_in_days', models.PositiveIntegerField(default=14, verbose_name='Default Number of Days until Invoice is Due')),
                ('bank_account', models.CharField(blank=True, max_length=64, null=True, verbose_name='Bank Account')),
                ('vat_payer', models.BooleanField(default=False, verbose_name='VAT Payer')),
            ],
            options={
                'verbose_name': 'Site Configuration',
            },
        ),
        migrations.CreateModel(
            name='Testimonial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('author', models.CharField(max_length=64, verbose_name='Autor')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Order')),
            ],
            options={
                'verbose_name': 'Testimonial',
                'verbose_name_plural': 'Testimonials',
                'ordering': ('order',),
            },
        ),
    ]
